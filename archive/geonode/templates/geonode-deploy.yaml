# Sync gateway pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-geonode
  namespace: {{ .Release.Namespace }}
spec:
  # This pod can NOT be scaled, because it persists local files
  replicas: 1
  strategy:
    # Need to kill previous pods before running new ones to avoid double-attaching volumes...
    type: Recreate
  selector:
    matchLabels:
      org.geonode.instance: {{ .Release.Name }}-geonode
  template:
    metadata:
      annotations:
        # Add a checksum to force the re-creation of the pods on every config update
        checksum/conf: {{ .Values.geonode.extraConf | sha256sum }}
        checksum/conf2: {{ .Values.geonode.extraConf2 | sha256sum }}
        checksum/nginx: {{ include "nginx_conf" . | sha256sum }}
      labels:
        org.geonode.instance: {{ .Release.Name }}-geonode
    spec:
      # Resolving some hardcoded links...
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - geonode
        - geoserver

      initContainers:
      # Initialize default data
      # The tag NEEDS to match with the geoserver tag
      # See https://hub.docker.com/r/geonode/geoserver
      - name: data-dir-conf
        image: geonode/geoserver_data:{{ .Values.geoserver.image.tag }}
        command:
        - sh
        - -c
        - |
          # Copy defaults from data container
          cp -r /tmp/geonode/downloaded/data /geoserver_data

          # Copy overrides from ConfigMap
          cp /overrides/notifier.xml /geoserver_data/data/notifier/

          # Update custom EPSG codes
          cat /geoserver_data/data/user_projections/epsg.properties > /tmp/epsg.properties
          {{- range .Values.geoserver.customEPSGs }}
          echo '{{ . }}' >> /tmp/epsg.properties
          {{- end }}
          {{- range .Values.geoserver.extraCustomEPSGs }}
          echo '{{ . }}' >> /tmp/epsg.properties
          {{- end }}
          sort -u /tmp/epsg.properties > /geoserver_data/data/user_projections/epsg.properties
        volumeMounts:
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: geoserver-conf
          mountPath: /overrides

      # Wait for Postgres and rabbit
      - name: wait-db
        image: jwilder/dockerize
        imagePullPolicy: IfNotPresent
        args:
        - -timeout=120s
        - -wait
        - tcp://{{ include "database_host" .}}
        - -wait
        - tcp://{{ include "rabbit_host" .}}
        # Copy dockerize binary for later use in containers
        # Doesn't seem to work for some reason?
        # - sh
        # - -c
        # - cp /usr/local/bin/dockerize /tmp/ && ls -la /tmp/
        # volumeMounts:
        # - name: cache-volume
        #   mountPath: /tmp

      # All containers need to be in the same pod since they share volumes!
      # This also means they probably can't be scaled up... (?)
      containers:
      # This is the django app server
      - name: geonode
        image: "{{ .Values.geonode.image.name }}:{{ .Values.geonode.image.tag }}"
        env:
        {{ include "env_general" . | nindent 8 }}
        - name: IS_CELERY
          value: 'False'
        envFrom:
          - secretRef:
              name: {{ .Release.Name }}-secrets
        command:
        - bash
        - -c
        - |
          # Disable file logging if any
          sed -i 's/^logto/#logto/ig' /usr/src/geonode/uwsgi.ini
          # Run
          /usr/src/geonode/entrypoint.sh uwsgi --ini /usr/src/geonode/uwsgi.ini
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: geonode-conf
          mountPath: /usr/src/geonode/geonode/local_settings.py
          subPath: local_settings.py
        - name: persistence
          mountPath: /mnt/volumes/statics
          subPath: statics
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: persistence
          mountPath: /backup_restore
          subPath: backup-restore
        - name: persistence
          mountPath: /data
          subPath: data
        - name: cache-volume
          mountPath: /tmp
        # This one is HORRIBLY SLOW!!!
        # Disabling readiness probe...
        # readinessProbe:
        #   tcpSocket:
        #     port: 8000
        #   initialDelaySeconds: 60
        #   periodSeconds: 10
        #   failureThreshold: 15

        livenessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 1200
          periodSeconds: 10
          failureThreshold: 15

      # # Celery is the task worker
      - name: celery
        image: "{{ .Values.geonode.image.name }}:{{ .Values.geonode.image.tag }}"
        env:
        {{ include "env_general" . | nindent 8 }}
        - name: IS_CELERY
          value: 'True'
        - name: CELERY__LOG_FILE
          value: /dev/stdout
        envFrom:
          - secretRef:
              name: {{ .Release.Name }}-secrets
        command:
        - bash
        - -c
        - |
          # Run celery
          /usr/src/geonode/entrypoint.sh celery-cmd
        volumeMounts:
        - name: geonode-conf
          mountPath: /usr/src/geonode/geonode/local_settings.py
          subPath: local_settings.py
        # To persist uploaded media
        - name: persistence
          mountPath: /mnt/volumes/statics
          subPath: statics
        # Mount statics as emptydir to recreate them on pod recreation (e.g. upgrades) but not on container restart
        - name: static
          mountPath: /mnt/volumes/statics/static
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: persistence
          mountPath: /backup_restore
          subPath: backup-restore
        - name: persistence
          mountPath: /data
          subPath: data
        - name: cache-volume
          mountPath: /tmp
        # healthcheck: curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8001/

      - name: nginx
        image: nginx:1.19
        ports:
        - containerPort: 80
        volumeMounts:
        - name: persistence
          mountPath: /mnt/volumes/statics
          subPath: statics
        - name: geonode-conf
          mountPath: /mnt/volumes/statics/static/geonode/img/favicon.ico
          subPath: favicon.ico
        - name: nginx-confd
          mountPath: /etc/nginx/conf.d

      # Geoserver backend
      # TODO: route logs to console
      - name: geoserver
        image: "{{ .Values.geoserver.image.name }}:{{ .Values.geoserver.image.tag }}"
        ports:
        - containerPort: 8080
        env:
        {{ include "env_general" . | nindent 8 }}
        envFrom:
          - secretRef:
              name: {{ .Release.Name }}-secrets
        volumeMounts:
        # - name: persistence
        #   mountPath: /mnt/volumes/statics
        #   subPath: statics
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        # - name: persistence
        #   mountPath: /backup_restore
        #   subPath: backup-restore
        # - name: persistence
        #   mountPath: /data
        #   subPath: data
        # - name: cache-volume
        #   mountPath: /tmp
        readinessProbe:
          tcpSocket:
          # httpGet:
            # path: /
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 15

        livenessProbe:
          tcpSocket:
          # httpGet:
            # path: /
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 5
          failureThreshold: 15

      volumes:
      - name: nginx-confd
        configMap:
          name: {{ .Release.Name }}-nginx-confd
      - name: geoserver-conf
        configMap:
          name: {{ .Release.Name }}-geoserver-conf
      - name: geonode-conf
        configMap:
          name: {{ .Release.Name }}-geonode-conf
      - name: persistence
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-geonode
      # Using an emptyDir to cache compiled statics... it will survive container crashes, but not pod restarts
      - name: cache-volume
        emptyDir: {}
      - name: static
        emptyDir: {}
