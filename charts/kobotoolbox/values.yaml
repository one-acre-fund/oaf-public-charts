probes:
  enabled: true

priorityClass: system-cluster-critical

nginx:
  image:
    name: nginx
    tag: "1.21"

shared:
  extraEnv:
    BACKUPS_DIR: /srv/backups
  extraSecretEnv: {}
  initContainers: []
  sidecarContainers: []

kobocat:
  image:
    # -- KoboCat docker image name
    name: kobotoolbox/kobocat
    # -- KoboCat docker image tag
    # see https://hub.docker.com/r/kobotoolbox/kobocat for latest tags
    tag: "2.022.24a"
  # -- DNS subdomain name to serve the form server from
  subdomain: kc
  # -- Dictionary of env variables to pass
  # @default -- see `values.yaml`
  extraEnv:
    USE_X_FORWARDED_HOST: "False"
    ENKETO_PROTOCOL: http
    ENKETO_VERSION: Express
    KOBOCAT_CELERY_LOG_FILE: /srv/logs/celery.log
    ENKETO_OFFLINE_SURVEYS: "True"
    KC_UWSGI_PROCESS_COUNT: "2"
    KC_UWSGI_MAX_REQUESTS: "512"
    KC_UWSGI_WORKERS_COUNT: "2"
    KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT: "134217728"
    KC_UWSGI_CHEAPER_WORKERS_COUNT: "1"
    KC_UWSGI_HARAKIRI: "120"
    KC_UWSGI_WORKER_RELOAD_MERCY: "120"
    KC_UWSGI_RELOAD_ON_RSS_MB: "1024"
    KC_UWSGI_MIN_WORKER_LIFTIME: "3600"
    KC_UWSGI_MAX_WORKER_LIFTIME: ""
  # -- Azure blob storage credentials
  #   KOBOCAT_DEFAULT_FILE_STORAGE: "kobo.apps.storage_backends.private_azure_storage.PrivateAzureStorage"
  #   AZURE_ACCOUNT_NAME: "storage-account-name"
  #   AZURE_CONTAINER: "storage-container-name"
  #   AZURE_URL_EXPIRATION_SECS: "3600"
  extraSecretEnv: {}
  #   AZURE_ACCOUNT_KEY: secrettoken
  # -- UWSGI Config for KoboCat
  # @default -- see `values.yaml`
  uwsgi_conf: |
    [uwsgi]

    # load apps in each worker instead of the master
    # This also increases memory consumption
    # lazy-apps = true

    # log requests with a 5xx response
    log-5xx = true

    # log requests with a 4xx response
    log-4xx = true

    # disable request logging
    disable-logging = false

    # exit if no app can be loaded
    need-app = true

    # desired to ensure all options are known
    strict = false

    # number of threads for each worker
    threads = 2

    # cleanup sockets on worker reload
    vacuum = true

    # directory structure
    chdir           = $(KOBOCAT_SRC_DIR)
    module          = onadata.apps.main.wsgi
    # logto           = $(KOBOCAT_LOGS_DIR)/uwsgi.log

    # process related settings
    master              = true
    harakiri            = $(KC_UWSGI_HARAKIRI)
    worker-reload-mercy = $(KC_UWSGI_WORKER_RELOAD_MERCY)

    # monitoring (use with `uwsgitop :1717`, for example)
    stats = :1717
    memory-report = false

    # Overrideable default of 2 uWSGI processes.
    if-env = KC_UWSGI_WORKERS_COUNT
    workers = %(_)
    endif =
    if-not-env = KC_UWSGI_WORKERS_COUNT
    workers = 2
    endif =

    # # activate cheaper mode
    # if-env = KC_UWSGI_CHEAPER_WORKERS_COUNT
    # cheaper-algo = spare
    # cheaper = %(_)
    # cheaper-initial = %(_)
    # cheaper-step = 2
    # cheaper-overload = 1
    # endif =

    # # stop spawning new workers if total memory consumption grows too large
    # if-env = KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(_)
    # endif =
    # if-not-env = KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(2 * 1024 * 1024 * 1024)
    # endif =

    # # respawn processes after serving KC_UWSGI_MAX_REQUESTS requests (default 5000)
    # if-env = KC_UWSGI_MAX_REQUESTS
    # max-requests = %(_)
    # max-requests-delta = 2
    # endif =

    # # respawn individual workers when their memory consumption grows too large
    # if-env = KC_UWSGI_RELOAD_ON_RSS_MB
    # reload-on-rss = %(_)
    # endif =
    # if-not-env = KC_UWSGI_RELOAD_ON_RSS_MB
    # reload-on-rss = 512
    # endif =

    # respawn workers only after they have run for at leat min-worker-lifetime
    if-env = KC_UWSGI_MIN_WORKER_LIFTIME
    min-worker-lifetime = %(_)
    endif =
    if-not-env = KC_UWSGI_MIN_WORKER_LIFTIME
    min-worker-lifetime = 120
    endif =

    # respawn workers only after they have run for at leat min-worker-lifetime
    if-env = KC_UWSGI_MAX_WORKER_LIFTIME
    max-worker-lifetime = %(_)
    endif =

    socket          = [::]:8001
    buffer-size     = 32768
    listen          = @(/proc/sys/net/core/somaxconn)

    uid             = $(UWSGI_USER)
    gid             = $(UWSGI_GROUP)
    die-on-term     = false

    # Required for Raven/Sentry
    enable-threads  = false

    # Custom tweaks
    single-interpreter = true
    post-buffering = true
    ignore-sigpipe = true
    ignore-write-errors = true
    disable-write-exception = true
    vacuum = true

kpi:
  image:
    # -- kpi docker image name
    # See https://hub.docker.com/r/kobotoolbox/kpi for list of tags
    name: kobotoolbox/kpi
    # -- kpi docker image tag
    tag: "2.022.24d"
  # -- DNS subdomain to serve the main UI from
  subdomain: kobo
  # -- Dictionary of env variables to pass
  # @default -- see `values.yaml`
  extraEnv:
    DJANGO_LANGUAGE_CODES: ar cs de-DE en es fr hi ku pl pt tr zh-hans
    KOBO_SUPPORT_URL: "http://support.kobotoolbox.org/"
    SYNC_KOBOCAT_XFORMS: "True"
    C_FORCE_ROOT: "True"
    USE_X_FORWARDED_HOST: "False"
    ENKETO_VERSION: Express
    KPI_PREFIX: /
    DKOBO_PREFIX: "False"
    KOBO_SURVEY_PREVIEW_EXPIRATION: "24"
    SKIP_CELERY: "False"
    EMAIL_FILE_PATH: ./emails
    SYNC_KOBOCAT_XFORMS_PERIOD_MINUTES: "30"
    KPI_UWSGI_PROCESS_COUNT: "2"
    KPI_UWSGI_MAX_REQUESTS: "512"
    KPI_UWSGI_WORKERS_COUNT: "2"
    KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT: "134217728"
    KPI_UWSGI_CHEAPER_WORKERS_COUNT: "1"
    KPI_UWSGI_HARAKIRI: "120"
    KPI_UWSGI_WORKER_RELOAD_MERCY: "120"
    KPI_UWSGI_RELOAD_ON_RSS_MB: "1024"
    KPI_UWSGI_MIN_WORKER_LIFTIME: "3600"
    KPI_UWSGI_MAX_WORKER_LIFTIME: ""
    # KPI_DEFAULT_FILE_STORAGE: "kobo.apps.storage_backends.private_azure_storage.PrivateAzureStorage"
    # AZURE_ACCOUNT_NAME: "storage-account-name"
    # AZURE_CONTAINER: "storage-container-name"
    # AZURE_URL_EXPIRATION_SECS: "3600"
  extraSecretEnv:
    {}
    # AZURE_ACCOUNT_KEY: secrettoken
  # -- UWSGI Config for KPI
  # @default -- see `values.yaml`
  uwsgi_conf: |
    [uwsgi]
    # load apps in each worker instead of the master, this also increases
    # memory consumption
    lazy-apps = true

    # log requests with a 5xx response
    log-5xx = true

    # log requests with a 4xx response
    log-4xx = true

    # disable request logging
    disable-logging = false

    # exit if no app can be loaded
    need-app = true

    # desired to ensure all options are known
    strict = false

    # number of threads for each worker
    threads = 2

    # cleanup sockets on worker reload
    vacuum = true

    # directory structure
    chdir       = $(KPI_SRC_DIR)
    # logto       = $(KPI_LOGS_DIR)/uwsgi.log

    # Run the application at a non-root URL path, e.g. http://hostname/KPI_PREFIX.
    # See http://uwsgi-docs.readthedocs.org/en/latest/Nginx.html#hosting-multiple-apps-in-the-same-process-aka-managing-script-name-and-path-info
    # This supersedes `wsgi-file = $(KPI_SRC_DIR)/kobo/wsgi.py`.
    manage-script-name = true
    mount              = $(KPI_PREFIX)=$(KPI_SRC_DIR)/kobo/wsgi.py

    # process related settings
    master              = true
    harakiri            = $(KPI_UWSGI_HARAKIRI)
    worker-reload-mercy = $(KPI_UWSGI_WORKER_RELOAD_MERCY)

    # monitoring (use with `uwsgitop :1717`, for example)
    stats = :1818
    memory-report = true

    # Overrideable default of 2 uWSGI processes.
    if-env = KPI_UWSGI_WORKERS_COUNT
    workers = %(_)
    endif =
    if-not-env = KPI_UWSGI_WORKERS_COUNT
    workers = 2
    endif =

    # activate cheaper mode
    # if-env = KPI_UWSGI_CHEAPER_WORKERS_COUNT
    # cheaper-algo = busyness
    # cheaper = %(_)
    # cheaper-initial = %(_)
    # cheaper-step = 1
    # cheaper-overload = 30
    # cheaper-busyness-max = 50
    # cheaper-busyness-min = 25
    # cheaper-busyness-multiplier = 20
    # endif =

    # # stop spawning new workers if total memory consumption grows too large
    # if-env = KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(_)
    # endif =
    # if-not-env = KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(2 * 1024 * 1024 * 1024)
    # endif =

    # # respawn processes after serving KPI_UWSGI_MAX_REQUESTS requests (default 5000)
    # if-env = KPI_UWSGI_MAX_REQUESTS
    # max-requests = %(_)
    # max-requests-delta = 2
    # endif =

    # # respawn workers when their memory consumption grows too large
    # if-env = KPI_UWSGI_RELOAD_ON_RSS_MB
    # reload-on-rss = %(_)
    # endif =
    # if-not-env = KPI_UWSGI_RELOAD_ON_RSS_MB
    # reload-on-rss = 512
    # endif =

    # respawn workers only after they have run for at leat min-worker-lifetime
    if-env = KPI_UWSGI_MIN_WORKER_LIFTIME
    min-worker-lifetime = %(_)
    endif =
    if-not-env = KPI_UWSGI_MIN_WORKER_LIFTIME
    min-worker-lifetime = 120
    endif =

    # respawn workers only after they have run for at leat min-worker-lifetime
    if-env = KPI_UWSGI_MAX_WORKER_LIFTIME
    max-worker-lifetime = %(_)
    endif =

    socket          = [::]:8003
    buffer-size     = 32768
    listen          = @(/proc/sys/net/core/somaxconn)

    uid             = $(UWSGI_USER)
    gid             = $(UWSGI_GROUP)
    die-on-term      = false

    # uWSGI does not pass locale information to the application by default
    env = LC_ALL=en_US.UTF-8

    # Required for Raven/Sentry
    enable-threads  = true

    # Custom tweaks
    single-interpreter = true
    post-buffering = true
    ignore-sigpipe = true
    ignore-write-errors = true
    disable-write-exception = true
    vacuum = true

enketo:
  image:
    # -- Enketo image name - the web-based form preview and filling UI
    name: enketo/enketo-express
    # -- Enketo image tag
    # See https://hub.docker.com/r/kobotoolbox/enketo-express-extra-widgets
    tag: "3.0.4"
  # -- DNS subdomain to serve Enketo from
  subdomain: ee
  # -- Number of Enketo pods
  replicas: 1
  # -- Random API key
  apiKey: WEHQJCXHJ2XOBXGOGMXCUJYXQP9ZZFVY4FHLCSKJIWAWPTCMGMECGNBCHXVBFCFT1H5TQTQCKB0J7DF2X23WC7EHOCCVQ7K8CY6QO9C8NMERACUM6S2QQEER
  # -- Random API key
  encryptionKey: w0RkyuQSB33md8cZB5Xx
  # -- Random API key
  lessSecureEncryptionKey: wUNQWPwA3bDVzckKKtS4
  # -- Logo source (data:URI or relative path in `public/images` folder)
  logoSource: ""
  # -- Enketo configuration - will be evaluated as a template
  # @default -- see `values.yaml`
  config: |-
    {
      "app name": "Enketo Express for KoBo Toolbox",
      "linked form and data server": {
        "name": "KoBo Toolbox",
        "server url": "",
        "api key": "{{ .Values.enketo.apiKey }}"
      },
      "encryption key": "{{ .Values.enketo.encryptionKey }}",
      "less secure encryption key": "{{ .Values.enketo.lessSecureEncryptionKey }}",
      "widgets": [
        "note",
        "select-desktop",
        "select-mobile",
        "autocomplete",
        "geo",
        "textarea",
        "url",
        "table",
        "radio",
        "date",
        "time",
        "datetime",
        "select-media",
        "file",
        "draw",
        "rank",
        "likert",
        "range",
        "columns",
        "image-view",
        "comment",
        "image-map",
        "date-native",
        "date-native-ios",
        "date-mobile",
        "text-max",
        "text-print",
        "rating",
        "thousands-sep"
      ],
      "redis": {
        "cache": {
          "host": "{{ .Release.Name }}-rediscache-master",
          {{- if .Values.rediscache.usePassword }}
          "password": "{{ .Values.global.redis.password }}",
          {{- end }}
          "port": "6379"
        },
        "main": {
          "host": "{{ .Release.Name }}-redismain-master",
          {{- if .Values.redismain.usePassword }}
          "password": "{{ .Values.global.redis.password }}",
          {{- end }}
          "port": "6379"
        }
      },
      "google": {
        "api key": "{{ .Values.external.google.apiKey }}",
        "analytics": {
          "ua": "{{ .Values.external.google.analyticsToken }}",
          "domain": "{{ .Values.general.externalScheme }}://{{ .Values.enketo.subdomain }}.{{ .Values.general.externalDomain }}{{ .Values.general.publicPort }}"
        }
      },
      "payload limit": "1mb",
      "text field character limit": 1000000,
      {{- if .Values.enketo.logoSource }}
      "logo": {
        "source": "{{ .Values.enketo.logoSource }}"
      },
      {{- end }}
      "maps": [
        {
          "name": "humanitarian",
          "tiles": [ "https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png" ],
          "attribution": "&copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> & <a href=\"https://www.hotosm.org/updates/2013-09-29_a_new_window_on_openstreetmap_data\">Yohan Boniface & Humanitarian OpenStreetMap Team</a> | <a href=\"https://www.openstreetmap.org/copyright\">Terms</a>"
        },
        {
          "name": "satellite",
          "tiles": [ "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}" ],
          "attribution": "Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"
        },
        {
          "name": "terrain",
          "tiles": [ "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png" ],
          "attribution": "&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> | <a href=\"https://www.openstreetmap.org/copyright\">Terms</a>"
        },
        {
          "name": "streets",
          "tiles": [ "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" ],
          "attribution": "&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> | <a href=\"https://www.openstreetmap.org/copyright\">Terms</a>"
        }
      ]
    }

general:
  # -- Replica for the kpi+kobocat pod. __WARNING__: if using more than 1 replicas, you NEED to use a ReadWriteMany accessmode in mediaStorage.accessMode, and a storage class that supports it!
  replicas: 1
  # -- Parent domain to serve all apps from
  # __WARNING__: The subdomains MUST be reachable since the application will try to call itself at this address
  externalDomain: example.com
  # -- Public URL scheme
  externalScheme: http
  # -- Public URL port
  externalPort:
  # -- Random Django secret
  djangoSecret: EKMvRtT2RFB3xDvFty4SVCsTyaQAHS9aA2mkRqtTp9zQYz48fp
  # -- Enable various debug flags?
  debug: false
  superUser:
    # -- Admin user name - This user will have access to kobotoolbox UI but also the built-in Django admin interface (/admin)
    username: kobo
    # -- Admin user password
    password: kobo
  # -- Support email visible from the website
  supportEmail: support@example.com
  # -- Service type to expose
  serviceType: ClusterIP
  # -- Set this to true in order to force internal resolution of external domains, in case those aren't reachable from inside the containers.
  # Useful for troubleshooting, but won't work if the public scheme is https
  forceInternal: false
  mediaStorage:
    # -- Should we enable media volume (can be disabled if using online storage)
    enabled: false
    # -- Storage size for uploaded media volume
    size: 10Gi
    # -- Storage class will default to global.storageClass if provided, but can be specifically overridden here
    storageClass: ""
    # -- Needs to be ReadWriteMany if you intend to scale to more than 1 pod!
    accessMode: ReadWriteOnce
  sentry:
    environment: development

ingress:
  # -- Install ingress?
  enabled: false
  # -- Ingress annotations
  annotations:
    {}
    # You typically want to enable large media uploads
    # nginx.ingress.kubernetes.io/proxy-body-size: 100M
  # -- Ingress TLS settings
  tls: {}

external:
  google:
    apiKey: ""
    analyticsToken: ""
  ravenDSN:
    kobocat: ""
    kpi: ""
    kpiJs: ""

smtp:
  # -- SMTP Host
  host: smtp.gmail.com
  # -- Use TLS for SMTP?
  tls: true
  # -- SMTP port
  port: "587"
  # -- SMTP Username
  user: ""
  # -- SMTP Password
  password: ""
  # -- SMTP "from" address
  from: ""

global:
  redis:
    # -- Redis password
    password: brFdS9b7Xp
  # -- Will be used by this and all subcharts
  storageClass: standard

rediscache:
  enabled: true
  usePassword: true
  architecture: standalone

redismain:
  enabled: true
  usePassword: true
  architecture: standalone

# -- Standard MongoDB values
# See https://artifacthub.io/packages/helm/bitnami/mongodb for doc
# @default -- see `values.yaml`
mongodb:
  # -- Install MongoDB?
  enabled: true
  # TODO: support external db
  # For now we only support a db installed with a subchart
  auth:
    rootPassword: kobo
    username: kobo
    password: kobo
    database: formhub
  initdbScripts:
    index.js: |
      db.getSiblingDB('{{ .Values.auth.database }}').instances.createIndex( { _userform_id: 1 } )
    create-user.js: |
      db.createUser({
        user: "{{ .Values.auth.username }}",
        pwd: "{{ .Values.auth.password }}",
        roles: [ { role: 'readWrite', db: "{{ .Values.auth.database }}" } ]
      })

# -- Standard postgres chart values
# See https://artifacthub.io/packages/helm/bitnami/postgresql for docs
# @default -- see `values.yaml`
postgresql:
  # -- Install Postgres?
  enabled: true
  # -- DB name for the form server
  kobocatDatabase: kobocat
  # -- DN name for the main Kobo UI
  kpiDatabase: koboform

  # TODO: support external db
  # For now we only support a db installed with a subchart
  auth:
    host: "{{ .Release.Name }}-postgresql"
    postgresPassword: admin
    username: postgres
    password: kobo
  primary:
    initdb:
      scriptsConfigMap: "{{ .Release.Name }}-postgres-init"

# uwsgi exporter
uwsgiExporter:
  enabled: false
  logLevel: info

flower:
  enabled: false
  ports:
    kpi: 5566
    kobocat: 5577
  auth:
    enabled: false
    oauthKey: auth-key
    oauthSecret: auth-secret
    redirectUrl:
      kpi: http://flower.kpi.com/login
      kobocat: http://flower.kobocat.com/login
    authenticatedEmails: "me@gmail.com|you@gmail.com"
