# Default values for nocodb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""

replicaCount: 1

nocodb:
  publicUrl: ""
  backendUrl: ""

image:
  repository: nocodb/nocodb
  pullPolicy: IfNotPresent
  tag: 0.257.0

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  automountServiceAccountToken: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## @param automountServiceAccountToken Mount Service Account token in pod
##
automountServiceAccountToken: false

## @param hostAliases Odoo pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []

## @param podLabels Extra labels for Odoo pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## @param podAnnotations Annotations for Odoo pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}

## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enabled Odoo pods' Security Context
## @param podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
## @param podSecurityContext.sysctls Set kernel settings using the sysctl interface
## @param podSecurityContext.supplementalGroups Set filesystem extra groups
## @param podSecurityContext.fsGroup Set Odoo pod's Security Context fsGroup
##
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 0

## Configure Container Security Context (only main container)
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled Enabled containers' Security Context
## @param containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
## @param containerSecurityContext.runAsUser Set containers' Security Context runAsUser
## @param containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
## @param containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
## @param containerSecurityContext.privileged Set container's Security Context privileged
## @param containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
## @param containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
## @param containerSecurityContext.capabilities.add List of capabilities to be added
## @param containerSecurityContext.capabilities.drop List of capabilities to be dropped
## @param containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
##
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 0
  runAsGroup: 0
  runAsNonRoot: false
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
    add: ["CHOWN", "FOWNER", "SYS_CHROOT", "SETGID", "SETUID", "DAC_OVERRIDE"]
  seccompProfile:
    type: "RuntimeDefault"

service:
  ## @param service.type Odoo service type
  ##
  type: ClusterIP
  ## @param service.ports.http Odoo service HTTP port
  ##
  ports:
    http: 8080
  ## @param service.nodePorts.http NodePort for the Odoo HTTP endpoint
  ## NOTE: choose port between <30000-32767>
  ##
  nodePorts:
    http: ""
  ## @param service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## Values: ClientIP or None
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}
  ## @param service.clusterIP Odoo service Cluster IP
  ## e.g.:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP Odoo service Load Balancer IP
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges Odoo service Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy Odoo service external traffic policy
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for Odoo service
  ##
  annotations: {}
  ## @param service.extraPorts Extra port to expose on Odoo service
  ##
  extraPorts: []

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## @param resources Resource requests and limits for Odoo pods
resources:
  requests:
    ephemeral-storage: "1Gi"
    memory: "512Mi"
    cpu: "250m"
  limits:
    ephemeral-storage: "2Gi"
    memory: "1Gi"
    cpu: "500m"

## @param livenessProbe Liveness probe configuration for Odoo pods
livenessProbe:
  httpGet:
    path: /api/v1/health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

## @param readinessProbe Readiness probe configuration for Odoo pods
readinessProbe:
  httpGet:
    path: /api/v1/health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

## @param autoscaling Horizontal Pod Autoscaler configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
##
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
##
topologySpreadConstraints: []

affinity: {}

priorityClassName: ""

schedulerName: ""

extraEnvSecrets: []
extraEnv: []

admin:
  create: true
  email: ""
  password: ""
  existingSecretPasswordKey: ""
  existingSecretEmailKey: ""
  existingSecretName: ""

smtp:
  enabled: true
  host: smtp.gmail.com
  port: 587
  secure: true
  username: ""
  password: ""
  from: ""
  ignoreTLS: true
  existingSecret: ""
  existingSecretUsernameKey: ""
  existingSecretPasswordKey: ""

minio:
  enabled: true
  auth:
    rootUser: admin
    rootPassword: ""
    existingSecret: ""
    rootUserSecretKey: ""
    rootPasswordSecretKey: ""
  defaultBuckets: "nocodb"
  region: us-east-1

externalMinio:
  rootUser: admin
  rootPassword: ""
  endpoint: ""
  region: us-east-1
  bucketName: ""
  existingSecret: ""
  rootUserSecretKey: ""
  rootPasswordSecretKey: ""

redis:
  enabled: true
  master:
    disableCommands:
      - FLUSHALL
  replica:
    disableCommands:
      - FLUSHALL
  auth:
    password: ""

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: nocodb_user
    password: ""
    postgresPassword: ""
    replicationPassword: ""
    database: nocodb
    existingSecret: ""
  architecture: standalone

externalDatabase:
  host: ""
  port: 5432
  user: nocodb_user
  password: ""
  database: nocodb
  create: true
  postgresqlPostgresUser: "postgres"
  postgresqlPostgresPassword: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
  existingSecretPostgresPasswordKey: ""
